{"ast":null,"code":"export default {\n  name: \"get-request-async-await\",\n\n  data() {\n    return {\n      latitude: '',\n      longitude: '',\n      airportDistanceKm: 0,\n      airportDistanceMi: 0,\n      postCode: '',\n      responseStatus: 0,\n      elementVisible: true,\n      nhs_ha: '',\n      ccg: '',\n      postCodeCards: []\n    };\n  },\n\n  watch: {\n    nonNullItems: function () {\n      // return this.postCodeCards.filter(\n      //     function () {\n      //         return val => val;\n      //     }\n      // );\n      console.table(this.postCodeCards); // return this.postCodeCards.shift();\n      // return this.postCodeCards.filter(val => {\n      //     console.log(val)\n      //     });\n    }\n  },\n  methods: {\n    async created() {\n      if (!this.elementVisible) {\n        this.elementVisible = true;\n      }\n\n      setTimeout(() => this.elementVisible = false, 1500);\n\n      if (!this.code) {\n        return;\n      } // GET request using fetch with async/await\n\n\n      const response = await fetch(`http://api.postcodes.io/postcodes/${this.code}`);\n      this.responseStatus = response.status;\n\n      if (response.status === 404) {\n        return;\n      }\n\n      const data = await response.json();\n      const longitude = data.result.longitude;\n      const nhs_ha = data.result.nhs_ha;\n      const ccg = data.result.ccg;\n      const latitude = data.result.latitude;\n      this.postCode = this.code;\n      this.nhs_ha = nhs_ha, this.ccg = ccg, this.latitude = latitude;\n      this.longitude = longitude;\n      this.airportDistanceKm = (airportDistance(51.4700223, -0.4542955, latitude, longitude) * 1.6).toFixed(2);\n      this.airportDistanceMi = airportDistance(51.4700223, -0.4542955, latitude, longitude).toFixed(2);\n      let searchCards = {\n        postCode: this.postCode,\n        nhs_ha: this.nhs_ha,\n        ccg: this.ccg,\n        long: this.longitude,\n        lat: this.latitude,\n        airportDistanceMi: this.airportDistanceMi,\n        airportDistanceKm: this.airportDistanceKm\n      };\n      this.postCodeCards.push(searchCards); //This function takes in latitude and longitude of two location and returns the distance between them (in km and mi)\n\n      function airportDistance(lat1, lon1, lat2, lon2) {\n        let R = 6371; // km\n\n        let dLat = toRad(lat2 - lat1);\n        let dLon = toRad(lon2 - lon1);\n        let airportLat1 = toRad(lat1);\n        let postCodeLat2 = toRad(lat2);\n        let a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(airportLat1) * Math.cos(postCodeLat2);\n        let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n        let d = R * c;\n        return d;\n      } // Converts numeric degrees to radians\n\n\n      function toRad(Value) {\n        return Value * Math.PI / 180;\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["name","data","latitude","longitude","airportDistanceKm","airportDistanceMi","postCode","responseStatus","elementVisible","nhs_ha","ccg","postCodeCards","watch","nonNullItems","console","table","methods","created","setTimeout","code","response","fetch","status","json","result","airportDistance","toFixed","searchCards","long","lat","push","lat1","lon1","lat2","lon2","R","dLat","toRad","dLon","airportLat1","postCodeLat2","a","Math","sin","cos","c","atan2","sqrt","d","Value","PI"],"sourceRoot":"","sources":["/Users/tiagonunes/Documents/dev/pt-tiago-nunes-01/address-uk/src/components/GetPostCode.vue"],"sourcesContent":["<template>\n\n    <!-- <div class=\"flex flex-col h-screen justify-between\"> -->\n\n    <div class=\"card text-center m-3\">\n        <img class=\"mx-auto  mb-6\" src=\"../assets/map-pin.svg\" alt=\"github\">\n\n        <div class=\"flex justify-center\">\n            <div class=\"mb-3 xl:w-96\">\n                <div class=\"form-group input-group relative flex flex-wrap items-stretch w-full mb-4\">\n                    <div class=\"flex absolute inset-y-0 left-0 items-center pl-3 pointer-events-none\">\n                        <svg class=\"w-5 h-5 text-gray-500 dark:text-gray-400\" fill=\"none\" stroke=\"currentColor\"\n                            viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n                                d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"></path>\n                        </svg>\n                    </div>\n                    <input type=\"search\" v-model=\"code\"\n                        class=\"block p-4 pl-10 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\"\n                        placeholder=\"Search\" aria-label=\"Search\" aria-describedby=\"button-addon2\">\n                    <button @click=\"created\"\n                        class=\"text-white absolute right-2.5 bottom-2.5 bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-4 py-2 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800\"\n                        type=\"button\" id=\"button-addon2\">Search\n                    </button>\n                </div>\n            </div>\n        </div>\n        <h1 v-show=\"elementVisible\" v-if=\"responseStatus === 404\" class=\"flex justify-center mb-5\">\n            <div class=\"bg-orange-100 border-l-4 border-orange-500 text-orange-700 p-4\" role=\"alert\">\n                <p class=\"font-bold\">Error!</p>\n                <p>No data was found for postcode: <strong>{{ postCode }}</strong></p>\n            </div>\n        </h1>\n\n        <!-- <div v-else> -->\n        <div v-if=\"postCode\">\n            <ul>\n                <li class=\"card-body\"><strong>{{ nhs_ha }}</strong></li>\n                <li class=\"card-body\"><strong>{{ postCode }}</strong></li>\n                <li class=\"card-body\"><strong>{{ ccg }}</strong></li>\n                <li class=\"card-body\">Longitude: <strong>{{ longitude }}</strong></li>\n                <li class=\"card-body\">Latitude: <strong>{{ latitude }}</strong></li>\n                <li class=\"card-body\">London Heathrow airport distance/km: <strong>{{ airportDistanceKm\n                }}</strong>\n                </li>\n                <li class=\"card-body mb-10\">London Heathrow airport distance/mi: <strong>{{ airportDistanceMi\n                }}</strong>\n                </li>\n            </ul>\n        </div>\n\n\n        <div v-if=\"postCodeCards\">\n        <h2 class=\"font-bold mb-7 \">Search History</h2>\n            <div class=\"grid grid-cols-3 gap-2 text-left flex justify-center items-center ml-10\">\n                <div v-for=\"card in postCodeCards\" :key=\"card.id\"\n                    class=\"max-w-sm bg-white rounded-lg border border-gray-200 shadow-md dark:bg-gray-800 dark:border-gray-700 mb-6\">\n                    <a href=\"#\">\n                        <img class=\"rounded-t-lg\"\n                            src=\"https://i.pinimg.com/originals/83/26/96/832696c3ff680f405ddc47fead99fc5c.jpg\" alt=\"\" />\n                    </a>\n                    <div class=\"p-5\">\n                        <div class=\"card-body\"><strong>{{ card.nhs_ha }}</strong></div>\n                        <div class=\"card-body\"><strong>{{ card.postCode }}</strong></div>\n                        <div class=\"card-body\"><strong>{{ card.ccg }}</strong></div>\n                        <div class=\"card-body\">Longitude: <strong>{{ card.long }}</strong></div>\n                        <div class=\"card-body\">Latitude: <strong>{{ card.lat }}</strong></div>\n                        <div class=\"card-body\">London Heathrow airport distance/km: <strong>{{\n                                card.airportDistanceKm\n                        }}</strong>\n                        </div>\n                        <div class=\"card-body\">London Heathrow airport distance/mi: <strong>{{\n                                card.airportDistanceMi\n                        }}</strong>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n    </div>\n    <footer class=\"p-4 bg-white rounded-lg shadow md:flex md:items-center md:justify-between md:p-6 dark:bg-gray-800\">\n        <span class=\"text-sm text-gray-500 sm:text-center dark:text-gray-400\">© 2022 Tiago Nunes\n        </span>\n        <ul class=\"flex flex-wrap items-center mt-3 text-sm text-gray-500 dark:text-gray-400 sm:mt-0\">\n            <li>\n                <a href=\"https://github.com/tiagonunes1\" class=\"mr-4 hover:underline md:mr-6 \"><img\n                        src=\"../assets/github.svg\" alt=\"github\"></a>\n            </li>\n        </ul>\n    </footer>\n    <!-- </div> -->\n</template>\n\n<script>\nexport default {\n    name: \"get-request-async-await\",\n    data() {\n        return {\n            latitude: '',\n            longitude: '',\n            airportDistanceKm: 0,\n            airportDistanceMi: 0,\n            postCode: '',\n            responseStatus: 0,\n            elementVisible: true,\n            nhs_ha: '',\n            ccg: '',\n            postCodeCards: []\n\n        };\n    },\n    watch: {\n        nonNullItems: function () {\n            // return this.postCodeCards.filter(\n            //     function () {\n            //         return val => val;\n            //     }\n            // );\n            console.table(this.postCodeCards);\n           // return this.postCodeCards.shift();\n            // return this.postCodeCards.filter(val => {\n            //     console.log(val)\n            //     });\n        }\n    },\n    methods: {\n\n        async created() {\n            if (!this.elementVisible) {\n                this.elementVisible = true;\n            }\n            setTimeout(() => this.elementVisible = false, 1500)\n\n            if (!this.code) {\n                return;\n            }\n            // GET request using fetch with async/await\n            const response = await fetch(`http://api.postcodes.io/postcodes/${this.code}`);\n            this.responseStatus = response.status;\n            if (response.status === 404) {\n                return;\n            }\n\n            const data = await response.json();\n            const longitude = data.result.longitude\n            const nhs_ha = data.result.nhs_ha\n            const ccg = data.result.ccg\n            const latitude = data.result.latitude\n            this.postCode = this.code\n            this.nhs_ha = nhs_ha,\n                this.ccg = ccg,\n                this.latitude = latitude;\n            this.longitude = longitude;\n            this.airportDistanceKm = (airportDistance(51.4700223, -0.4542955, latitude, longitude) * 1.6).toFixed(2)\n            this.airportDistanceMi = airportDistance(51.4700223, -0.4542955, latitude, longitude).toFixed(2)\n            let searchCards = { postCode: this.postCode, nhs_ha: this.nhs_ha, ccg: this.ccg, long: this.longitude, lat: this.latitude, airportDistanceMi: this.airportDistanceMi, airportDistanceKm: this.airportDistanceKm };\n            this.postCodeCards.push(searchCards);\n\n            //This function takes in latitude and longitude of two location and returns the distance between them (in km and mi)\n            function airportDistance(lat1, lon1, lat2, lon2) {\n                let R = 6371; // km\n                let dLat = toRad(lat2 - lat1);\n                let dLon = toRad(lon2 - lon1);\n                let airportLat1 = toRad(lat1);\n                let postCodeLat2 = toRad(lat2);\n\n                let a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n                    Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(airportLat1) * Math.cos(postCodeLat2);\n                let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n                let d = R * c;\n                return d;\n            }\n            // Converts numeric degrees to radians\n            function toRad(Value) {\n                return Value * Math.PI / 180;\n            }\n        }\n    },\n\n};\n</script>"]},"metadata":{},"sourceType":"module"}