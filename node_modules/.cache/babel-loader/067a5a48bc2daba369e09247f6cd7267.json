{"ast":null,"code":"export default {\n  name: \"get-request-async-await\",\n\n  data() {\n    return {\n      latitude: '',\n      longitude: '',\n      airportDistanceKm: 0,\n      airportDistanceMi: 0,\n      postCode: '',\n      responseStatus: 0,\n      elementVisible: true,\n      nhs_ha: '',\n      ccg: '',\n      postCodeCards: [{}]\n    };\n  },\n\n  computed: {// nonNullItems: function () {\n    //     // return this.postCodeCards.filter(function (item) {\n    //     //     return item !== '';\n    //     // });\n    //     //return this.postCodeCards.shift();\n    // }\n  },\n  methods: {\n    async created() {\n      if (!this.elementVisible) {\n        this.elementVisible = true;\n      }\n\n      setTimeout(() => this.elementVisible = false, 1500);\n\n      if (!this.code) {\n        return;\n      } // GET request using fetch with async/await\n\n\n      const response = await fetch(`http://api.postcodes.io/postcodes/${this.code}`);\n      this.responseStatus = response.status;\n\n      if (response.status === 404) {\n        return;\n      }\n\n      const data = await response.json();\n      const longitude = data.result.longitude;\n      const nhs_ha = data.result.nhs_ha;\n      const ccg = data.result.ccg;\n      const latitude = data.result.latitude;\n      this.postCode = this.code;\n      this.nhs_ha = nhs_ha, this.ccg = ccg, this.latitude = latitude;\n      this.longitude = longitude;\n      this.airportDistanceKm = (airportDistance(51.4700223, -0.4542955, latitude, longitude) * 1.6).toFixed(2);\n      this.airportDistanceMi = airportDistance(51.4700223, -0.4542955, latitude, longitude).toFixed(2);\n      let searchCards = {\n        postCode: this.postCode,\n        nhs_ha: this.nhs_ha,\n        address: ccg,\n        long: this.longitude,\n        lat: this.latitude,\n        airportDistanceMi: this.airportDistanceMi,\n        airportDistanceKm: this.airportDistanceKm\n      };\n      this.postCodeCards.push(searchCards); //This function takes in latitude and longitude of two location and returns the distance between them (in km and mi)\n\n      function airportDistance(lat1, lon1, lat2, lon2) {\n        let R = 6371; // km\n\n        let dLat = toRad(lat2 - lat1);\n        let dLon = toRad(lon2 - lon1);\n        let airportLat1 = toRad(lat1);\n        let postCodeLat2 = toRad(lat2);\n        let a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(airportLat1) * Math.cos(postCodeLat2);\n        let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n        let d = R * c;\n        return d;\n      } // Converts numeric degrees to radians\n\n\n      function toRad(Value) {\n        return Value * Math.PI / 180;\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAuFA,eAAe;EACXA,IAAI,EAAE,yBADK;;EAEXC,IAAI,GAAG;IACH,OAAO;MACHC,QAAQ,EAAE,EADP;MAEHC,SAAS,EAAE,EAFR;MAGHC,iBAAiB,EAAE,CAHhB;MAIHC,iBAAiB,EAAE,CAJhB;MAKHC,QAAQ,EAAE,EALP;MAMHC,cAAc,EAAE,CANb;MAOHC,cAAc,EAAE,IAPb;MAQHC,MAAM,EAAE,EARL;MASHC,GAAG,EAAE,EATF;MAUHC,aAAa,EAAE,CAAC,EAAD;IAVZ,CAAP;EAaH,CAhBU;;EAiBXC,QAAQ,EAAE,CACN;IACA;IAEA;IACA;IACA;IACA;EAPM,CAjBC;EA0BXC,OAAO,EAAE;IAEL,MAAMC,OAAN,GAAgB;MACZ,IAAI,CAAC,KAAKN,cAAV,EAA0B;QACtB,KAAKA,cAAL,GAAsB,IAAtB;MACJ;;MACAO,UAAU,CAAC,MAAM,KAAKP,cAAL,GAAsB,KAA7B,EAAoC,IAApC,CAAV;;MAEA,IAAI,CAAC,KAAKQ,IAAV,EAAgB;QACZ;MACJ,CARY,CASZ;;;MACA,MAAMC,QAAO,GAAI,MAAMC,KAAK,CAAE,qCAAoC,KAAKF,IAAK,EAAhD,CAA5B;MACA,KAAKT,cAAL,GAAsBU,QAAQ,CAACE,MAA/B;;MACA,IAAIF,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA6B;QACzB;MACJ;;MAEA,MAAMlB,IAAG,GAAI,MAAMgB,QAAQ,CAACG,IAAT,EAAnB;MACA,MAAMjB,SAAQ,GAAIF,IAAI,CAACoB,MAAL,CAAYlB,SAA9B;MACA,MAAMM,MAAK,GAAIR,IAAI,CAACoB,MAAL,CAAYZ,MAA3B;MACA,MAAMC,GAAE,GAAIT,IAAI,CAACoB,MAAL,CAAYX,GAAxB;MACA,MAAMR,QAAO,GAAID,IAAI,CAACoB,MAAL,CAAYnB,QAA7B;MACA,KAAKI,QAAL,GAAgB,KAAKU,IAArB;MACA,KAAKP,MAAL,GAAcA,MAAd,EACA,KAAKC,GAAL,GAAWA,GADX,EAEA,KAAKR,QAAL,GAAgBA,QAFhB;MAGA,KAAKC,SAAL,GAAiBA,SAAjB;MACA,KAAKC,iBAAL,GAAyB,CAACkB,eAAe,CAAC,UAAD,EAAa,CAAC,SAAd,EAAyBpB,QAAzB,EAAmCC,SAAnC,CAAf,GAA+D,GAAhE,EAAqEoB,OAArE,CAA6E,CAA7E,CAAzB;MACA,KAAKlB,iBAAL,GAAyBiB,eAAe,CAAC,UAAD,EAAa,CAAC,SAAd,EAAyBpB,QAAzB,EAAmCC,SAAnC,CAAf,CAA6DoB,OAA7D,CAAqE,CAArE,CAAzB;MACA,IAAIC,WAAU,GAAI;QAAElB,QAAQ,EAAE,KAAKA,QAAjB;QAA2BG,MAAM,EAAE,KAAKA,MAAxC;QAAgDgB,OAAO,EAAEf,GAAzD;QAA8DgB,IAAI,EAAE,KAAKvB,SAAzE;QAAoFwB,GAAG,EAAE,KAAKzB,QAA9F;QAAwGG,iBAAiB,EAAE,KAAKA,iBAAhI;QAAmJD,iBAAiB,EAAE,KAAKA;MAA3K,CAAlB;MACA,KAAKO,aAAL,CAAmBiB,IAAnB,CAAwBJ,WAAxB,EA7BY,CA+BZ;;MACA,SAASF,eAAT,CAAyBO,IAAzB,EAA+BC,IAA/B,EAAqCC,IAArC,EAA2CC,IAA3C,EAAiD;QAC7C,IAAIC,IAAI,IAAR,CAD6C,CAC/B;;QACd,IAAIC,IAAG,GAAIC,KAAK,CAACJ,IAAG,GAAIF,IAAR,CAAhB;QACA,IAAIO,IAAG,GAAID,KAAK,CAACH,IAAG,GAAIF,IAAR,CAAhB;QACA,IAAIO,WAAU,GAAIF,KAAK,CAACN,IAAD,CAAvB;QACA,IAAIS,YAAW,GAAIH,KAAK,CAACJ,IAAD,CAAxB;QAEA,IAAIQ,IAAIC,IAAI,CAACC,GAAL,CAASP,IAAG,GAAI,CAAhB,IAAqBM,IAAI,CAACC,GAAL,CAASP,IAAG,GAAI,CAAhB,CAArB,GACJM,IAAI,CAACC,GAAL,CAASL,IAAG,GAAI,CAAhB,IAAqBI,IAAI,CAACC,GAAL,CAASL,IAAG,GAAI,CAAhB,CAArB,GAA0CI,IAAI,CAACE,GAAL,CAASL,WAAT,CAA1C,GAAkEG,IAAI,CAACE,GAAL,CAASJ,YAAT,CADtE;QAEA,IAAIK,IAAI,IAAIH,IAAI,CAACI,KAAL,CAAWJ,IAAI,CAACK,IAAL,CAAUN,CAAV,CAAX,EAAyBC,IAAI,CAACK,IAAL,CAAU,IAAIN,CAAd,CAAzB,CAAZ;QACA,IAAIO,IAAIb,IAAIU,CAAZ;QACA,OAAOG,CAAP;MACJ,CA5CY,CA6CZ;;;MACA,SAASX,KAAT,CAAeY,KAAf,EAAsB;QAClB,OAAOA,KAAI,GAAIP,IAAI,CAACQ,EAAb,GAAkB,GAAzB;MACJ;IACJ;;EAnDK;AA1BE,CAAf","names":["name","data","latitude","longitude","airportDistanceKm","airportDistanceMi","postCode","responseStatus","elementVisible","nhs_ha","ccg","postCodeCards","computed","methods","created","setTimeout","code","response","fetch","status","json","result","airportDistance","toFixed","searchCards","address","long","lat","push","lat1","lon1","lat2","lon2","R","dLat","toRad","dLon","airportLat1","postCodeLat2","a","Math","sin","cos","c","atan2","sqrt","d","Value","PI"],"sourceRoot":"","sources":["/Users/tiagonunes/Documents/dev/pt-tiago-nunes-01/address-uk/src/components/GetPostCode.vue"],"sourcesContent":["<template>\n<div class=\"flex flex-col h-screen justify-between\">\n\n    <div class=\"card text-center m-3\">\n        <h1>Postcode</h1>\n\n        <div class=\"flex justify-center\">\n            <div class=\"mb-3 xl:w-96\">\n                <div class=\"input-group relative flex flex-wrap items-stretch w-full mb-4\">\n                    <input type=\"search\" v-model=\"code\"\n                        class=\"form-control relative flex-auto min-w-0 block w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-solid border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none\"\n                        placeholder=\"Search\" aria-label=\"Search\" aria-describedby=\"button-addon2\">\n                    <button @click=\"created\"\n                        class=\"btn inline-block px-6 py-2.5 bg-blue-600 text-white font-medium text-xs leading-tight uppercase rounded shadow-md hover:bg-blue-700 hover:shadow-lg focus:bg-blue-700  focus:shadow-lg focus:outline-none focus:ring-0 active:bg-blue-800 active:shadow-lg transition duration-150 ease-in-out flex items-center\"\n                        type=\"button\" id=\"button-addon2\">\n                        <svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"search\" class=\"w-4\"\n                            role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n                            <path fill=\"currentColor\"\n                                d=\"M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z\">\n                            </path>\n                        </svg>\n                    </button>\n                </div>\n            </div>\n        </div>\n\n        <h1 v-show=\"elementVisible\" v-if=\"responseStatus === 404\" class=\"flex justify-center mb-5\">\n            <div class=\"bg-orange-100 border-l-4 border-orange-500 text-orange-700 p-4\" role=\"alert\">\n                <p class=\"font-bold\">Error!</p>\n                <p>No data was found for postcode: <strong>{{ postCode }}</strong></p>\n            </div>\n        </h1>\n\n        <!-- <div v-else> -->\n        <div v-if=\"postCode\">\n            <div class=\"card-body\">City: <strong>{{ nhs_ha }}</strong></div>\n            <div class=\"card-body\">Postcode: <strong>{{ postCode }}</strong></div>\n            <div class=\"card-body\">Ccg: <strong>{{ ccg }}</strong></div>\n            <div class=\"card-body\">Longitude: <strong>{{ longitude }}</strong></div>\n            <div class=\"card-body\">Latitude: <strong>{{ latitude }}</strong></div>\n            <div class=\"card-body\">Distance from London Heathrow airport in km: <strong>{{ airportDistanceKm }}</strong>\n            </div>\n            <div class=\"card-body mb-10\">Distance from London Heathrow airport in mi: <strong>{{ airportDistanceMi\n            }}</strong>\n            </div>\n        </div>\n        <h2 class=\"font-bold\">Search History</h2>\n        <div class=\"grid grid-cols-3 gap-4\">\n            <div v-for=\"card in postCodeCards\" :key=\"card.id\"\n                class=\"max-w-sm bg-white rounded-lg border border-gray-200 shadow-md dark:bg-gray-800 dark:border-gray-700 mb-6\">\n                <a href=\"#\">\n                    <img class=\"rounded-t-lg\"\n                        src=\"https://i.pinimg.com/originals/83/26/96/832696c3ff680f405ddc47fead99fc5c.jpg\" alt=\"\" />\n                </a>\n                <div class=\"p-5\">\n                    <div class=\"card-body\">City: <strong>{{ card.nhs_ha }}</strong></div>\n                    <div class=\"card-body\">Postcode: <strong>{{ card.postCode }}</strong></div>\n                    <div class=\"card-body\">Ccg: <strong>{{ card.ccg }}</strong></div>\n                    <div class=\"card-body\">Longitude: <strong>{{ card.long }}</strong></div>\n                    <div class=\"card-body\">Latitude: <strong>{{ card.lat }}</strong></div>\n                    <div class=\"card-body\">Distance from London Heathrow airport in km: <strong>{{\n                            card.airportDistanceKm\n                    }}</strong>\n                    </div>\n                    <div class=\"card-body\">Distance from London Heathrow airport in mi: <strong>{{\n                            card.airportDistanceMi\n                    }}</strong>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <footer class=\"p-4 bg-white rounded-lg shadow md:flex md:items-center md:justify-between md:p-6 dark:bg-gray-800\">\n        <span class=\"text-sm text-gray-500 sm:text-center dark:text-gray-400\">© 2022 <a href=\"https://flowbite.com\"\n                class=\"hover:underline\">Tiago Nunes</a>\n        </span>\n        <ul class=\"flex flex-wrap items-center mt-3 text-sm text-gray-500 dark:text-gray-400 sm:mt-0\">\n            <li>\n                <a href=\"https://github.com/tiagonunes1\" class=\"mr-4 hover:underline md:mr-6 \"><img\n                        src=\"../assets/github.svg\" alt=\"github\"></a>\n            </li>\n        </ul>\n    </footer>\n</div>\n</template>\n\n<script>\nexport default {\n    name: \"get-request-async-await\",\n    data() {\n        return {\n            latitude: '',\n            longitude: '',\n            airportDistanceKm: 0,\n            airportDistanceMi: 0,\n            postCode: '',\n            responseStatus: 0,\n            elementVisible: true,\n            nhs_ha: '',\n            ccg: '',\n            postCodeCards: [{}]\n\n        };\n    },\n    computed: {\n        // nonNullItems: function () {\n        //     // return this.postCodeCards.filter(function (item) {\n                \n        //     //     return item !== '';\n        //     // });\n        //     //return this.postCodeCards.shift();\n        // }\n    },\n    methods: {\n\n        async created() {\n            if (!this.elementVisible) {\n                this.elementVisible = true;\n            }\n            setTimeout(() => this.elementVisible = false, 1500)\n\n            if (!this.code) {\n                return;\n            }\n            // GET request using fetch with async/await\n            const response = await fetch(`http://api.postcodes.io/postcodes/${this.code}`);\n            this.responseStatus = response.status;\n            if (response.status === 404) {\n                return;\n            }\n\n            const data = await response.json();\n            const longitude = data.result.longitude\n            const nhs_ha = data.result.nhs_ha\n            const ccg = data.result.ccg\n            const latitude = data.result.latitude\n            this.postCode = this.code\n            this.nhs_ha = nhs_ha,\n            this.ccg = ccg,\n            this.latitude = latitude;\n            this.longitude = longitude;\n            this.airportDistanceKm = (airportDistance(51.4700223, -0.4542955, latitude, longitude) * 1.6).toFixed(2)\n            this.airportDistanceMi = airportDistance(51.4700223, -0.4542955, latitude, longitude).toFixed(2)\n            let searchCards = { postCode: this.postCode, nhs_ha: this.nhs_ha, address: ccg, long: this.longitude, lat: this.latitude, airportDistanceMi: this.airportDistanceMi, airportDistanceKm: this.airportDistanceKm };\n            this.postCodeCards.push(searchCards);\n            \n            //This function takes in latitude and longitude of two location and returns the distance between them (in km and mi)\n            function airportDistance(lat1, lon1, lat2, lon2) {\n                let R = 6371; // km\n                let dLat = toRad(lat2 - lat1);\n                let dLon = toRad(lon2 - lon1);\n                let airportLat1 = toRad(lat1);\n                let postCodeLat2 = toRad(lat2);\n\n                let a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n                    Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(airportLat1) * Math.cos(postCodeLat2);\n                let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n                let d = R * c;\n                return d;\n            }\n            // Converts numeric degrees to radians\n            function toRad(Value) {\n                return Value * Math.PI / 180;\n            }\n        }\n    },\n\n};\n</script>"]},"metadata":{},"sourceType":"module"}